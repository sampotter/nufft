* NUFFT
** Stuff to Code
   - [ ] Forward transform.
   - [ ] Vandermonde inversion for collocation.
** Analysis
   - [ ] Compare methods of estimating c0.
   - [ ] Are any of the test functions more or less difficult to interpolate?
	 - [ ] What about adding test functions which are just random sums
       of sinusoids?
** Plots to Make
*** Comparison Plots
**** Problem Size vs. Time (to compute to some prescribed accuracy)
	 Things to compare:
	 - IFFT (baseline)
	 - INUFFT using just phifar (note how large it needs to be to
       achieve the required accuracy and if this changes depending on
       the problem size)
	 - INUFFT using phifar and phinear
	 - min/max INUFFT
	 Note: /since clang on OS X doesn't support OpenMP, parfor loops
	 are treated as for loops./
** Goals
   - Approximate good choices for:
	 + the FMM depth,
	 + the truncation number,
	 + the radial neighborhood size,
	 + and the number of checkpoint pairs,
	 based on:
	 + the bandlimit,
	 + the function evaluates,
	 + and the evaluation points.
** Things to Verify Using Plots
   - [ ] Increasing the size of the radial neighborhood, all else being
     equal, should improve the accuracy.
   - [ ] Different checkpoint methods should perform differently.
   - [ ] Increasing the truncation number should improve accuracy.
   - [ ] Increasing the FMM depth should decrease accuracy but improve
     speed.
   - [ ] With the rest of the parameters fixed, there should be an
     optimal FMM depth.
** Things to Read
   - [ ] [[https://en.wikipedia.org/wiki/Dirichlet_kernel][Wikipedia - Dirichlet kernel]]
   - [ ] "Multipole Expansions and Pseudospectral Cardinal Functions"
** Links
*** References
   	- [[http://fastmultipole.org/Main/T-NuFFT][site containing links and references to NuFFT implementations]]
*** NUFFT Implementations
   	- [[http://cs.nyu.edu/cs/faculty/berger/nufft/nufft.html][CMCL (Courant)]]
   	- [[https://www-user.tu-chemnitz.de/~potts/nfft/download.php][Potts (TU Chemnitz)]]
   	- [[http://www.mathworks.com/matlabcentral/fileexchange/25135-nufft--nfft--usfft][Matthew Ferrara (Air Force Research Laboratory)]]
   	- [[http://web.eecs.umich.edu/~fessler/code/index.html][Image reconstruction toolbox]]

* Cauchy Kernel FMM
** C++ Implementation
   - [ ] Replace ~std::vector~ with ~boost::numeric::ublas::vector~?
   - [ ] Figure out how to deal with domain and range types -- if this
	 is even necessary...
   - [ ] Try out using Boost.Optional for the bookmarks instead of
	 using a pair of -1's to indicate no bookmark.
   - [ ] Alternative bookmark data structures to try:
	 - [ ] Heap-based
	 - [ ] Linear probing (i.e. no buckets) implementation
   - [ ] Play around with the ~inline~ keyword for optimization.
   - [ ] Factor out Kahan summation for reuse...
   - [ ] Kahan product?
   - [ ] Make ~p~ a template parameter to enable use of arrays on the
	 stack...
   - [ ] Look into Shewchuk summation...
*** Optimization
**** General
   	 - [ ] Put EVERYTHING on the stack/or preallocate all memory used
   	 - [ ] Remove dependance on boost (for compilation speed)
   	 - [ ] Diagram algorithm to try and figure out best way to move memory around
   	 - [ ] Sum directly into coefficient vectors instead of using an intermediate workspace
   	 - [ ] Don't use maps -- or at least don't use STL maps?
   	 - [ ] don't unnecessarily propagate coefficients that aren't there...
   	 - [ ] SSE/SIMD?
   	 - [ ] use a heap for the index finder?
**** Eventually
   	 - [ ] parallelize
	   - OpenMP?
	   - C++11 threads?
	   - TBB?
**** Things to try autotuning
   	 - [ ] Whether or not functions are inline
   	 - [ ] Duff's device for loop unrolling (this can be done using
       TMP--Game Programming Gems (maybe #1) books has a good
       tutorial).
   	 - [ ] Loop tiling
