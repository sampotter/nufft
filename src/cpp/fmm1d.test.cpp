#define BOOST_TEST_MODULE fmm1d

#include <algorithm>
#include <boost/test/included/unit_test.hpp>
#include <cinttypes>
#include <random>
#include <vector>

#include "cauchy.hpp"
#include "fmm1d.hpp"

using int_t = int64_t;
template <class T> using vector_t = std::vector<T>;

BOOST_AUTO_TEST_CASE (get_multipole_coefs_works) {
    using namespace nufft;
    
    vector_t<double> const sources = {
        0.29485291464409813,
        0.5666788017655526,
        0.5654834502137871,
        0.2657706439349883,
        0.49204494085537664,
        0.9084122210901464,
        0.41148775741412535,
        0.1644475290278926,
        0.6513973042753114,
        0.27746230058138965
    };
    vector_t<double> const weights = {
        1.0445860347168028,
        0.5869693012415074,
        -0.3081203031469292,
        0.5737051132055659,
        1.6566494091220096,
        -1.2482587142631936,
        -0.25163013862111666,
        0.766953789456392,
        -1.1087134957611795,
        -0.522790996978465
    };
    double const x_star = 0.01411425398533006;
    int_t const p = 8;
    vector_t<double> const expected = {
        1.1893499989713934,
        -0.561401797039591,
        -0.9246407244775339,
        -0.9419912324932764,
        -0.8682254042631719,
        -0.7754211982470006,
        -0.6855300683488881,
        -0.6047525248078208
    };
    auto const actual = fmm1d<cauchy<>>::get_multipole_coefs(
        sources.data(), weights.data(), sources.size(), x_star, p);
    
    BOOST_CHECK_EQUAL_COLLECTIONS(
        std::cbegin(actual),
        std::cend(actual),
        std::cbegin(expected),
        std::cend(expected));
}

BOOST_AUTO_TEST_CASE (evaluate_regular_works) {
    using namespace nufft;

    vector_t<double> targets = {
        0.9482536724346731,
        0.7499818943527383,
        0.8298628321249875,
        0.8494297688865196,
        0.26006551164815495,
        0.9766967094351526,
        0.8485999713559158,
        0.35385393749732574,
        0.8889124953814553,
        0.494916793867477
    };
    vector_t<double> coefs = {
        -0.44172701759315597,
        0.8759135544966249,
        1.2966258801174102,
        -1.1023501528620987,
        0.19028118911661535,
        0.12346783959953532,
        0.2758108098673406,
        -1.5661982045056975,
        0.05118043173330569,
        0.7551316717373412
    };
    double const x_star = 0.5327985806084505;
    int_t const p = 10;
    vector_t<double> expected = {
        0.07252219300692292,
        -0.20114859676536195,
        -0.09434507604911568,
        -0.06727178008279644,
        -0.5606560532840934,
        0.11305285489875792,
        -0.06842567959605964,
        -0.5504404492095917,
        -0.01187614807116009,
        -0.4729871827285726
    };
    auto const actual = fmm1d<cauchy<>>::evaluate_regular(
        targets, coefs, x_star, p);
    BOOST_CHECK_EQUAL_COLLECTIONS(
        std::cbegin(actual),
        std::cend(actual),
        std::cbegin(expected),
        std::cend(expected));
}

BOOST_AUTO_TEST_CASE (get_finest_farfield_coefs_works) {
    using namespace nufft;

    vector_t<double> const sources = {
        0.027724759164648782,
        0.1017675782233114,
        0.20430735891109553,
        0.24559217549075218,
        0.2926056583568193,
        0.461438165334801,
        0.46955936605491466,
        0.7367598526035393,
        0.8758118163708446,
        0.9070928255682373
    };
    int_t const max_level = 6;
    bookmarks<> const source_bookmarks {sources, max_level};
    vector_t<double> weights = {
        -0.8529660132143484,
        0.060626135963114336,
        -0.9946726382955,
        0.5102552840891833,
        -0.9502575254994525,
        -1.1341054387362248,
        0.8496737758738285,
        0.7073003580343848,
        1.3386182215257358,
        1.664974984102497
    };
    int_t const p = 9;

    // setting up the expected output value, this is a little
    // involved:

    fmm1d<cauchy<>>::coefs_type expected_coefs;
    expected_coefs[6] = {
        0.060626135963114336,
        1.2433100249550532e-5,
        2.5497581094302795e-9,
        5.228998629557822e-13,
        1.0723537486474351e-16,
        2.199164015339298e-20,
        4.510006490361357e-24,
        9.249041181661653e-28,
        1.8967769328690934e-31
    };
    expected_coefs[13] = {
        -0.9946726382955,
        0.006594819929172012,
        -4.372458658632944e-5,
        2.899001781213842e-7,
        -1.922079082643315e-9,
        1.274365550195726e-11,
        -8.449223396637038e-14,
        5.601954321137625e-16,
        -3.714174752274053e-18
    };
    expected_coefs[30] = {
        0.8496737758738285,
        -0.00595037926207084,
        4.167130299634015e-5,
        -2.91829716549606e-7,
        2.0437225941531785e-9,
        -1.431246307345199e-11,
        1.0023209598747205e-13,
        -7.019387937969174e-16,
        4.91577139421145e-18
    };
    expected_coefs[1] = {
        -0.8529660132143484,
        -0.0036568863572871493,
        -1.5678019549358434e-5,
        -6.721573299652971e-8,
        -2.881712672979576e-10,
        -1.2354649067116226e-12,
        -5.2967582439013566e-15,
        -2.2708575324095082e-17,
        -9.735754767434382e-20,
    };
    expected_coefs[15] = {
        0.5102552840891833,
        0.0017372536597652357,
        5.914784956622233e-6,
        2.013792337488144e-8,
        6.856309414910436e-11,
        2.3343508621959015e-13,
        7.947707167334617e-16,
        2.705936380029964e-18,
        9.212835272622709e-21,
    };
    expected_coefs[18] = {
        -0.9502575254994525,
        -0.0033669128926038018,
        -1.192950555211176e-5,
        -4.2268127289686865e-8,
        -1.4976266843355537e-10,
        -5.306328501999078e-13,
        -1.88011621758864e-15,
        -6.661549488140659e-18,
        -2.3602924738270823e-20,
    };
    expected_coefs[47] = {
        0.7073003580343848,
        -0.0038389769468010733,
        2.083661323037762e-5,
        -1.1309378955091835e-7,
        6.138332124119201e-10,
        -3.331670237208686e-12,
        1.8083131288851437e-14,
        -9.814886045979211e-17,
        5.327174069401785e-19,
    };
    expected_coefs[58] = {
        1.664974984102497,
        -0.011604333576223619,
        8.087842702385074e-5,
        -5.636963049093148e-7,
        3.928779723605541e-9,
        -2.7382315587641123e-11,
        1.908458248336385e-13,
        -1.330133265751666e-15,
        9.270595813146358e-18,
    };
    expected_coefs[56] = {
        1.3386182215257358,
        -0.009371242669124338,
        6.560510513858133e-5,
        -4.592805855326853e-7,
        3.215278076327577e-9,
        -2.2509144592128742e-11,
        1.575794000524075e-13,
        -1.1031635262390192e-15,
        7.722898838422848e-18,
    };
    expected_coefs[29] = {
        -1.1341054387362248,
        -0.0005678072791844797,
        -2.8428142153532876e-7,
        -1.4232985309068275e-10,
        -7.12596235498204e-14,
        -3.5677223282362345e-17,
        -1.7862348939433117e-20,
        -8.943058912093141e-24,
        -4.477479584367964e-27,
    };

    auto const actual_coefs = fmm1d<cauchy<>>::get_finest_farfield_coefs(
        source_bookmarks, sources, weights, max_level, p);

    for (auto const & entry: expected_coefs) {
        auto const key = entry.first;
        BOOST_CHECK(actual_coefs.find(key) != std::cend(actual_coefs));
    }

    for (auto const & entry: actual_coefs) {
        auto const key = entry.first;
        BOOST_CHECK(expected_coefs.find(key) != std::cend(expected_coefs));
    }

    for (auto const & entry: expected_coefs) {
        auto const & expected_box_coefs = entry.second;
        
        auto const key = entry.first;
        auto const & actual_box_coefs = actual_coefs.find(key)->second;

        BOOST_CHECK_EQUAL_COLLECTIONS(
            std::cbegin(expected_box_coefs),
            std::cend(expected_box_coefs),
            std::cbegin(actual_box_coefs),
            std::cend(actual_box_coefs));
    }
}

BOOST_AUTO_TEST_CASE (get_parent_farfield_coefs_works) {
    using namespace nufft;

    int_t level = 4;
    int_t p = 5;

    fmm1d<cauchy<>>::coefs_type child_coefs;
    child_coefs[1] = {
        -3.012747815605832,
        -0.04650204578472563,
        -0.0007321334059643607,
        -1.432903300758953e-5,
        -3.207116545684505e-7,
    };
    child_coefs[15] = {
        -1.7721947719892979,
        0.018082346378502652,
        -0.000350129603507875,
        1.3390387291094516e-5,
        -6.675044600429963e-8,
    };
    child_coefs[10] = {
        2.054880736142086,
        -0.0006315933683593428,
        0.0008403098049539753,
        1.489521054286529e-5,
        7.403795054423231e-7,
    };
    child_coefs[6] = {
        2.7946493161744024,
        -0.0005367675895145245,
        0.001545495684069563,
        -5.091590329332566e-6,
        1.0051820128414121e-6,
    };
    child_coefs[8] = {
        -2.4529782752529505,
        0.053470787923557264,
        -0.0013281285434251682,
        3.496740463254517e-5,
        -9.412339369350094e-7,
    };
    child_coefs[9] = {
        -1.0214320951534155,
        0.06287557601103148,
        -0.0006114894121579241,
        2.8789866476002085e-5,
        -2.3184455337913535e-7,
    };
    child_coefs[7] = {
        -1.2159664996435338,
        0.026812480550795402,
        -0.001231921685557535,
        2.5576366733776963e-5,
        -8.958555252600458e-7,
    };
    child_coefs[5] = {
        1.0799899351977786,
        -0.04287100926847032,
        -0.0001411436811340207,
        -1.7678817651878102e-5,
        -3.088856639769239e-7,
    };
    child_coefs[3] = {
        2.0485153711070385,
        0.0807072914574851,
        0.0029544505683835372,
        7.188967662504316e-5,
        2.664288800980216e-6,
    };
    child_coefs[2] = {
        -0.677907963761178,
        -0.010669730365930353,
        -0.00016102851253456228,
        -2.636621895753053e-6,
        -4.309949888478858e-8,
    };
    child_coefs[4] = {
        -3.2571880674423395,
        -0.04634763745062983,
        -0.0015537954032302653,
        -2.322815826153293e-5,
        -1.1950284777945614e-6,
    };
    child_coefs[12] = {
        0.3856001651325943,
        0.019237328880656015,
        0.00011544582509588966,
        2.265901077490516e-5,
        6.307772959602123e-8,
    };
    child_coefs[13] = {
        0.02784909055806617,
        -0.00028272100302225225,
        -5.586057995007658e-5,
        -4.835299658999943e-7,
        -2.0098981938649292e-8,
    };
    child_coefs[14] = {
        2.6616992530831087,
        -0.024447447562202837,
        0.0009878420377224,
        -2.5400387140970277e-5,
        7.478195016045957e-7,
    };
    child_coefs[11] = {
        0.2923633157755118,
        0.006464584596702668,
        8.752448755266928e-6,
        1.3374243427377594e-6,
        -8.980645928071882e-9,
    };
    child_coefs[0] = {
        2.4861518709052617,
        0.020569004905276696,
        0.0007928404106781417,
        1.630627105589163e-5,
        5.371148724791965e-7,
    };

    auto const actual_parent_coefs =
        fmm1d<cauchy<>>::get_parent_farfield_coefs(child_coefs, level, p);

    fmm1d<cauchy<>>::coefs_type expected_parent_coefs;
    expected_parent_coefs[6] = {
        0.4134492556906605,
        0.007774886797179758,
        -0.000756658833823668,
        5.072888673482013e-5,
        -4.489229202193755e-6,
    };
    expected_parent_coefs[3] = {
        1.5786828165308686,
        -0.09905603128302963,
        0.0035645844452998248,
        -0.00028531275567042795,
        1.0624249291006517e-5,
    };
    expected_parent_coefs[1] = {
        1.3706074073458605,
        0.15523829030618652,
        0.009842969716048634,
        0.0006497212229494401,
        4.076621866725059e-5,
    };
    expected_parent_coefs[2] = {
        -2.177198132244561,
        0.046318165863403545,
        -0.003603819873999395,
        -3.7493462489150535e-5,
        -1.2393475114818397e-5,
    };
    expected_parent_coefs[4] = {
        -3.474410370406366,
        0.16108218206269923,
        -0.004744797577465921,
        0.0005154880001451998,
        -1.5475630232454535e-5,
    };
    expected_parent_coefs[7] = {
        0.8895044810938109,
        -0.1449242894672129,
        0.004164481275326792,
        -0.0002914043058974535,
        1.530643496868409e-5,
    };
    expected_parent_coefs[5] = {
        2.347244051917598,
        -0.04924567815811212,
        0.0035848038959763974,
        -9.84247888414492e-5,
        7.116388755727788e-6,
    };
    expected_parent_coefs[0] = {
        -0.5265959447005701,
        -0.1977736560829206,
        -0.004645487515658015,
        -0.00038477786374808336,
        -1.1946889829296134e-5,
    };

    for (auto const & entry: actual_parent_coefs) {
        auto const key = entry.first;
        BOOST_CHECK(expected_parent_coefs.find(key) !=
                    std::cend(expected_parent_coefs));
    }

    for (auto const & entry: expected_parent_coefs) {
        auto const key = entry.first;
        BOOST_CHECK(actual_parent_coefs.find(key) !=
                    std::cend(actual_parent_coefs));
    }

    for (auto const & entry: actual_parent_coefs) {
        auto const actual_coef_vector = entry.second;
        auto const key = entry.first;
        if (expected_parent_coefs.find(key) != std::cend(expected_parent_coefs)) {
            auto const expected_coef_vector =
                expected_parent_coefs.find(key)->second;
            BOOST_CHECK_EQUAL_COLLECTIONS(
                std::cbegin(actual_coef_vector),
                std::cend(actual_coef_vector),
                std::cbegin(expected_coef_vector),
                std::cend(expected_coef_vector));
        }
    }
}

BOOST_AUTO_TEST_CASE (do_E4_SR_translations_works) {
    using namespace nufft;

    int_t level = 3;
    int_t p = 5;
    
    fmm1d<cauchy<>>::coefs_type input_coefs;
    input_coefs[6] = {
        0.4134492556906605,
        0.007774886797179758,
        -0.000756658833823668,
        5.072888673482013e-5,
        -4.489229202193755e-6,
    };
    input_coefs[3] = {
        1.5786828165308686,
        -0.09905603128302963,
        0.0035645844452998248,
        -0.00028531275567042795,
        1.0624249291006517e-5,
    };
    input_coefs[1] = {
        1.3706074073458605,
        0.15523829030618652,
        0.009842969716048634,
        0.0006497212229494401,
        4.076621866725059e-5,
    };
    input_coefs[2] = {
        -2.177198132244561,
        0.046318165863403545,
        -0.003603819873999395,
        -3.7493462489150535e-5,
        -1.2393475114818397e-5,
    };
    input_coefs[4] = {
        -3.474410370406366,
        0.16108218206269923,
        -0.004744797577465921,
        0.0005154880001451998,
        -1.5475630232454535e-5,
    };
    input_coefs[7] = {
        0.8895044810938109,
        -0.1449242894672129,
        0.004164481275326792,
        -0.0002914043058974535,
        1.530643496868409e-5,
    };
    input_coefs[5] = {
        2.347244051917598,
        -0.04924567815811212,
        0.0035848038959763974,
        -9.84247888414492e-5,
        7.116388755727788e-6,
    };
    input_coefs[0] = {
        -0.5265959447005701,
        -0.1977736560829206,
        -0.004645487515658015,
        -0.00038477786374808336,
        -1.1946889829296134e-5,
    };

    fmm1d<cauchy<>>::coefs_type expected_coefs;
    expected_coefs[6] = {
        -11.507875730900956,
        36.82155322053612,
        -110.49208659778566,
        290.5856195826335,
        -526.4878808929692,
    };
    expected_coefs[3] = {
        -4.554359782032055,
        -87.8379485007415,
        42.89574028197494,
        -2535.8619097743895,
        4057.117683806874,
    };
    expected_coefs[1] = {
        -8.211680467876757,
        -42.061923595417845,
        -213.30896509328298,
        -1073.7424458784974,
        -5370.665808957456,
    };
    expected_coefs[2] = {
        4.56420095921452,
        102.24157574485815,
        111.97418268858777,
        3075.983854436838,
        2187.2658673698525,
    };
    expected_coefs[4] = {
        -13.182380016089368,
        14.704184826741683,
        -186.64200391913565,
        394.800210752996,
        -2833.2047826555263,
    };
    expected_coefs[7] = {
        0.6269470880509882,
        -14.680877318869385,
        88.48918115322465,
        -432.7209787316656,
        1972.4564739407729,
    };
    expected_coefs[5] = {
        -6.886193675912745,
        -37.539209633816974,
        -209.21664472176877,
        -1097.889586127157,
        -6118.617432342293,
    };
    expected_coefs[0] = {
        4.685945552052858,
        27.935135675696912,
        149.53847782084546,
        758.3348717570577,
        3732.2818319838607,
    };

    fmm1d<cauchy<>>::coefs_type actual_coefs;
    fmm1d<cauchy<>>::do_E4_SR_translations(input_coefs, actual_coefs, level, p);

    auto const max_index = std::pow(2, level);
    auto const assert_indices_subset = [max_index] (
        fmm1d<cauchy<>>::coefs_type const & lhs_coefs,
        fmm1d<cauchy<>>::coefs_type const & rhs_coefs) {
        for (auto const & entry: lhs_coefs) {
            auto const index = entry.first;
            assert(0 <= index);
            assert(index < max_index);
            assert(rhs_coefs.find(index) != std::cend(rhs_coefs));
        }
    };
    assert_indices_subset(actual_coefs, expected_coefs);
    assert_indices_subset(expected_coefs, actual_coefs);

    for (auto const & entry: actual_coefs) {
        auto const index = entry.first;
        auto const & actual = entry.second;
        auto const & expected = expected_coefs.at(index);
        BOOST_CHECK_EQUAL_COLLECTIONS(
            std::cbegin(actual), std::cend(actual),
            std::cbegin(expected), std::cend(expected));
    }
}

BOOST_AUTO_TEST_CASE (do_RR_translations_works) {
    using namespace nufft;

    int_t level = 3;
    int_t p = 5;

    fmm1d<cauchy<>>::coefs_type input_coefs;
    input_coefs[6] = {
        -11.507875730900956,
        36.82155322053612,
        -110.49208659778566,
        290.5856195826335,
        -526.4878808929692,
    };
    input_coefs[3] = {
        -4.554359782032055,
        -87.8379485007415,
        42.89574028197494,
        -2535.8619097743895,
        4057.117683806874,
    };
    input_coefs[1] = {
        -8.211680467876757,
        -42.061923595417845,
        -213.30896509328298,
        -1073.7424458784974,
        -5370.665808957456,
    };
    input_coefs[2] = {
        4.56420095921452,
        102.24157574485815,
        111.97418268858777,
        3075.983854436838,
        2187.2658673698525,
    };
    input_coefs[4] = {
        -13.182380016089368,
        14.704184826741683,
        -186.64200391913565,
        394.800210752996,
        -2833.2047826555263,
    };
    input_coefs[7] = {
        0.6269470880509882,
        -14.680877318869385,
        88.48918115322465,
        -432.7209787316656,
        1972.4564739407729,
    };
    input_coefs[5] = {
        -6.886193675912745,
        -37.539209633816974,
        -209.21664472176877,
        -1097.889586127157,
        -6118.617432342293,
    };
    input_coefs[0] = {
        4.685945552052858,
        27.935135675696912,
        149.53847782084546,
        758.3348717570577,
        3732.2818319838607,
    };

    fmm1d<cauchy<>>::coefs_type expected_coefs;
    expected_coefs[1] = {
        5.731654136683816,
        39.95857554366885,
        242.50121090735004,
        1224.8701007550403,
        3732.2818319838607,
    };
    expected_coefs[15] = {
        0.24326037261092234,
        -10.177262361004171,
        59.478951549127714,
        -186.16391948906897,
        1972.4564739407729,
    };
    expected_coefs[10] = {
        -5.8897367415469475,
        -26.93274119352936,
        -142.14077003997843,
        -333.0624070843703,
        -6118.617432342293,
    };
    expected_coefs[6] = {
        -1.6862759871353306,
        -98.44346883066868,
        304.40496825187984,
        -3043.001620250249,
        4057.117683806874,
    };
    expected_coefs[8] = {
        -13.838903674787087,
        27.871801507323333,
        -240.25533295060123,
        748.9508085849368,
        -2833.2047826555263,
    };
    expected_coefs[9] = {
        -12.895795430564888,
        3.8498506310408684,
        -166.2302934344145,
        40.64961292105522,
        -2833.2047826555263,
    };
    expected_coefs[7] = {
        -7.3309244963231786,
        -92.09099404839864,
        -171.0691398308182,
        -2028.72219929853,
        4057.117683806874,
    };
    expected_coefs[5] = {
        7.964557505893039,
        118.51863383939073,
        413.1636799836616,
        3349.3920878580698,
        2187.2658673698525,
    };
    expected_coefs[3] = {
        -9.772315001479704,
        -59.195062589290195,
        -345.4410643687522,
        -1745.0756719981794,
        -5370.665808957456,
    };
    expected_coefs[2] = {
        -7.077908738809637,
        -31.22024424536482,
        -144.11435576653395,
        -402.4092197588154,
        -5370.665808957456,
    };
    expected_coefs[4] = {
        1.3867158666613741,
        103.98786054741643,
        -163.5832927232456,
        2802.5756210156064,
        2187.2658673698525,
    };
    expected_coefs[12] = {
        -12.775821764678382,
        44.64290223041679,
        -140.8193783607648,
        356.3966046942547,
        -526.4878808929692,
    };
    expected_coefs[13] = {
        -10.456738749699644,
        30.702854325397446,
        -86.33457468902101,
        224.77463447101235,
        -526.4878808929692,
    };
    expected_coefs[14] = {
        1.187226397589799,
        -21.71996676149045,
        140.614135061315,
        -679.2780379742621,
        1972.4564739407729,
    };
    expected_coefs[11] = {
        -8.302947206095029,
        -54.5786248678184,
        -347.99506743882034,
        -1862.7167651699435,
        -6118.617432342293,
    };
    expected_coefs[0] = {
        3.9394230695652435,
        20.355064196926484,
        100.31342245290173,
        291.79964275907514,
        3732.2818319838607,
    };

    fmm1d<cauchy<>>::coefs_type actual_coefs;
    fmm1d<cauchy<>>::do_RR_translations(input_coefs, actual_coefs, level, p);

    auto const max_index = std::pow(2, level + 1);
    auto const assert_indices_subset = [max_index] (
        fmm1d<cauchy<>>::coefs_type const & lhs_coefs,
        fmm1d<cauchy<>>::coefs_type const & rhs_coefs) {
        for (auto const & entry: lhs_coefs) {
            auto const index = entry.first;
            assert(0 <= index);
            assert(index < max_index);
            assert(rhs_coefs.find(index) != std::cend(rhs_coefs));
        }
    };
    assert_indices_subset(actual_coefs, expected_coefs);
    assert_indices_subset(expected_coefs, actual_coefs);

    for (auto const & entry: actual_coefs) {
        auto const index = entry.first;
        auto const & actual = entry.second;
        auto const & expected = expected_coefs.at(index);
        BOOST_CHECK_EQUAL_COLLECTIONS(
            std::cbegin(actual), std::cend(actual),
            std::cbegin(expected), std::cend(expected));
    }
}

BOOST_AUTO_TEST_CASE (evaluate_works) {
    using namespace nufft;

    vector_t<double> const X = {
        0.008151352509715437,
        0.014187502925144813,
        0.02034366727145609,
        0.02202857637998612,
        0.02894319566184045,
        0.03676834784179506,
        0.04008723274026438,
        0.04804860376246989,
        0.054087472252515534,
        0.060482822060552,
        0.08943680584884994,
        0.10500606717945082,
        0.12032056299608995,
        0.149644690661636,
        0.16399575359168406,
        0.17295293734862338,
        0.1940784067621999,
        0.19472401138108886,
        0.19550665277595458,
        0.21149931766015917,
        0.23238700059801976,
        0.24576762508144334,
        0.24912849700978046,
        0.251474425749884,
        0.2778489711875194,
        0.28278777097888397,
        0.2916855136167613,
        0.29491692123513524,
        0.3024724317021843,
        0.31078385908327544,
        0.3115380920113826,
        0.3136743350571911,
        0.31529335191622043,
        0.3235377148968104,
        0.328478378322246,
        0.3335836873875939,
        0.33426475584419135,
        0.33460561340856576,
        0.3357116589943412,
        0.3639473274730025,
        0.369807915850481,
        0.38095066088070295,
        0.3885254389178232,
        0.41833905661421134,
        0.43304676469343106,
        0.4414304642820588,
        0.4414547284375039,
        0.46146478577120464,
        0.4728643676095725,
        0.4765173566992167,
        0.49193333243936266,
        0.50327617772681,
        0.5071201926838604,
        0.5131249322272673,
        0.5210570991288785,
        0.5232121557759404,
        0.5724516474227774,
        0.5978856123220775,
        0.6100893410408164,
        0.6232861996223433,
        0.62708013819244,
        0.6312108664306908,
        0.6323132468797279,
        0.6336283049655851,
        0.6382476074220222,
        0.6410993790327437,
        0.6455807362292552,
        0.6490014066546634,
        0.6548613345831571,
        0.660760005532016,
        0.6638156375083564,
        0.6670092324816366,
        0.6675466356240218,
        0.6678162509086756,
        0.6711635788951225,
        0.6711908355621132,
        0.6760620468036482,
        0.6836411521096943,
        0.6992705353896258,
        0.7294822042921478,
        0.7298892130880534,
        0.7307805318482037,
        0.7545042014704597,
        0.7629569612464584,
        0.7672845987503998,
        0.8005869521646021,
        0.8091430602590535,
        0.8098393553368344,
        0.8246067244350386,
        0.8538586934328853,
        0.8583806865046115,
        0.877879272796741,
        0.9084083052440752,
        0.9170651067728552,
        0.9392164392688491,
        0.9577965275145455,
        0.991771244608467,
        0.996114194111184,
        0.99728394258303,
        0.9996043195049491,
    };

    vector_t<double> const Y = {
        0.008574352027924226,
        0.015532094909469718,
        0.02503638261672947,
        0.025273977817524607,
        0.030136328847707672,
        0.03193888114010712,
        0.036379011637759806,
        0.049401195219627825,
        0.06495963578273733,
        0.10469484229963011,
        0.10859464450178247,
        0.11096437432741091,
        0.11950824832697693,
        0.12797000914539924,
        0.13361530017234657,
        0.1712125625802925,
        0.1746227225656114,
        0.17811964189330887,
        0.18296390553395825,
        0.1960863528651533,
        0.19663701991455795,
        0.20045646117182492,
        0.20177058785210367,
        0.20631574072930658,
        0.21370735773419325,
        0.22749098980239024,
        0.24315749664058406,
        0.24705943352401616,
        0.2712982837845206,
        0.27578520894375513,
        0.2941805617046056,
        0.3096082039742396,
        0.32022149356564045,
        0.3301790642096849,
        0.3364239226460346,
        0.35174156419175895,
        0.38777186184764134,
        0.39734943697281744,
        0.4080701274721237,
        0.4133086386598519,
        0.42029326313526516,
        0.4234984028134612,
        0.44287023776156986,
        0.4552077454315202,
        0.47250014870909895,
        0.4768129216124657,
        0.4948506293000108,
        0.4965915275158179,
        0.507718421792914,
        0.5079331961190532,
        0.5124135125810059,
        0.5153294225309883,
        0.5160677453193077,
        0.5283370527257629,
        0.548125474263581,
        0.5510822406878615,
        0.5573957704853332,
        0.5578559997707941,
        0.5579235868107217,
        0.5697534519672953,
        0.5742467762016721,
        0.5745335087836922,
        0.5786928079717535,
        0.5843327931723206,
        0.5897563066886127,
        0.5976531061080668,
        0.5987283696065842,
        0.6109007185271589,
        0.6123691420168718,
        0.6257329708120922,
        0.6283402470116948,
        0.666427380959485,
        0.6935071116967604,
        0.7236508535858983,
        0.7320976750749608,
        0.7740541314176648,
        0.7760554810455056,
        0.7765223337695715,
        0.7872747379452709,
        0.7956001206875885,
        0.8015863998315045,
        0.8232422813648692,
        0.8399103974308728,
        0.8456111368350772,
        0.8505901907915003,
        0.8538368230512516,
        0.861699624200835,
        0.8667134182351992,
        0.8711596874979621,
        0.8748270491266537,
        0.8906432227011343,
        0.9077690436494292,
        0.9084018849915767,
        0.917174421108744,
        0.921429615505079,
        0.9247138136312409,
        0.9263782804975091,
        0.9438935850257735,
        0.9756257038942202,
        0.9892665037123389,
    };

    vector_t<double> const U = {
        -0.03449954875282528,
        0.6093486993474703,
        0.06145654095009269,
        -0.7012807815864042,
        0.9323398505862033,
        2.1169999607913574,
        -1.8016945124918535,
        0.343893091222027,
        0.4793244965747953,
        0.4802640742643986,
        0.2616883976431308,
        -2.718357904867573,
        -0.5560783083813898,
        0.03625383508494971,
        -0.16727771284741405,
        -0.5468840859987136,
        -0.10907667566115718,
        0.15817132626634228,
        0.6876323699187311,
        -1.5411387985881628,
        0.038753344602976136,
        -0.18035163410567795,
        2.994525438673987,
        -0.3621467755846239,
        0.9526174202898743,
        -1.2474808648961424,
        -1.4660076003936573,
        0.6497129410296961,
        -0.9704439374464038,
        0.4254345682050918,
        -1.2388738186461743,
        -0.7662575719318823,
        0.7550330845718916,
        1.0624397727218688,
        -0.44528955593442704,
        0.8102223766187259,
        -0.8751297797834459,
        0.9447162410275517,
        0.30392491644688163,
        0.04204290602399582,
        -0.7517124545633813,
        1.4608678561511534,
        -0.28159675752836233,
        0.806098757222139,
        0.8092794603294722,
        -1.3910456929328436,
        -0.06411950972285117,
        0.5985397798675192,
        0.33226952318325226,
        -0.39484031020349314,
        -0.2967702898351172,
        -1.1503394639216502,
        -0.7966998077982188,
        0.40197989899524705,
        -0.9537501317032205,
        0.04583122917489201,
        -2.1306394958377597,
        0.2827806211080903,
        0.6124573126444428,
        0.21396946693181107,
        0.626591105636883,
        0.5997588772215863,
        -1.074771526990735,
        -0.7614531277302596,
        0.45400104467619734,
        -0.35291192469612503,
        1.457792413081006,
        1.0042051651254666,
        0.19776801163575275,
        0.23212643620806017,
        0.089729049928636,
        -0.4411514196169876,
        -0.2178989590870556,
        -0.7449912248311719,
        0.62168078255925,
        -1.4314623050526656,
        0.9672762354077022,
        0.8285921026665456,
        -0.1061489967006018,
        1.0624535789030374,
        -1.1016896617948824,
        0.4377483953679585,
        -0.7496549289619789,
        0.624806762343695,
        0.15554763950436584,
        -0.3418579307287108,
        0.7472129549048031,
        -0.05045433192957993,
        -0.04529299628341949,
        0.49091102522675284,
        -0.4177689383852672,
        1.1428008345998049,
        0.9763889562481631,
        0.542509462235141,
        -0.29892920621997693,
        -1.1354334776850212,
        -1.5920022879345825,
        1.7605382455773864,
        -0.39423268364772973,
        -0.11213536207937418,
    };

    int_t const p {5};
    int_t const L {4};
    bookmarks<> const X_bookmarks {X, L};
    bookmarks<> const Y_bookmarks {Y, L};

    fmm1d<cauchy<>>::coefs_type coefs;
    coefs[1] = {
        5.731654136683816,
        39.95857554366885,
        242.50121090735004,
        1224.8701007550403,
        3732.2818319838607,
    };
    coefs[15] = {
        0.24326037261092234,
        -10.177262361004171,
        59.478951549127714,
        -186.16391948906897,
        1972.4564739407729,
    };
    coefs[10] = {
        -5.8897367415469475,
        -26.93274119352936,
        -142.14077003997843,
        -333.0624070843703,
        -6118.617432342293,
    };
    coefs[6] = {
        -1.6862759871353306,
        -98.44346883066868,
        304.40496825187984,
        -3043.001620250249,
        4057.117683806874,
    };
    coefs[8] = {
        -13.838903674787087,
        27.871801507323333,
        -240.25533295060123,
        748.9508085849368,
        -2833.2047826555263,
    };
    coefs[9] = {
        -12.895795430564888,
        3.8498506310408684,
        -166.2302934344145,
        40.64961292105522,
        -2833.2047826555263,
    };
    coefs[7] = {
        -7.3309244963231786,
        -92.09099404839864,
        -171.0691398308182,
        -2028.72219929853,
        4057.117683806874,
    };
    coefs[5] = {
        7.964557505893039,
        118.51863383939073,
        413.1636799836616,
        3349.3920878580698,
        2187.2658673698525,
    };
    coefs[3] = {
        -9.772315001479704,
        -59.195062589290195,
        -345.4410643687522,
        -1745.0756719981794,
        -5370.665808957456,
    };
    coefs[2] = {
        -7.077908738809637,
        -31.22024424536482,
        -144.11435576653395,
        -402.4092197588154,
        -5370.665808957456,
    };
    coefs[4] = {
        1.3867158666613741,
        103.98786054741643,
        -163.5832927232456,
        2802.5756210156064,
        2187.2658673698525,
    };
    coefs[12] = {
        -12.775821764678382,
        44.64290223041679,
        -140.8193783607648,
        356.3966046942547,
        -526.4878808929692,
    };
    coefs[13] = {
        -10.456738749699644,
        30.702854325397446,
        -86.33457468902101,
        224.77463447101235,
        -526.4878808929692,
    };
    coefs[14] = {
        1.187226397589799,
        -21.71996676149045,
        140.614135061315,
        -679.2780379742621,
        1972.4564739407729,
    };
    coefs[11] = {
        -8.302947206095029,
        -54.5786248678184,
        -347.99506743882034,
        -1862.7167651699435,
        -6118.617432342293,
    };
    coefs[0] = {
        3.9394230695652435,
        20.355064196926484,
        100.31342245290173,
        291.79964275907514,
        3732.2818319838607,
    };

    vector_t<double> output(100, 0);

    vector_t<double> const expected = {
        -201.94042374614466,
        449.9495034196414,
        -470.7289253653951,
        -473.0073014088683,
        586.6292550511171,
        44.48618989392128,
        -4876.121106581413,
        175.83731503326763,
        274.9949441072398,
        8843.961956008092,
        -641.3621241054685,
        -330.46191758663633,
        557.924658247916,
        -191.46212405376247,
        -137.0304108817742,
        207.71663367310262,
        -427.4509801722268,
        -204.39208049262544,
        -158.95520795737298,
        1291.5813914677424,
        695.9437344011199,
        233.60199851880046,
        220.99864547763826,
        308.6570083810201,
        -721.2924106532121,
        -177.74719795216237,
        -389.58290911866465,
        -1498.7543316081494,
        130.51448088075574,
        -113.35406949209091,
        -1351.5914873951594,
        92.907001766475,
        -523.7315965728119,
        -518.4378434434693,
        747.0120039371674,
        8.52675970594129,
        557.4749691813693,
        23.470920217496097,
        -32.33611633481449,
        -120.89099705662441,
        439.2178843067288,
        170.83217278509105,
        -870.958985154568,
        -79.62640865525039,
        -681.7656965513053,
        -1118.7411861998999,
        120.70113209152751,
        204.98387694144134,
        -1620.153821260016,
        -1257.9548565241282,
        -751.6624754319722,
        138.0299747441786,
        130.74656600901412,
        -176.1057976179985,
        -24.361910054278777,
        -7.426809196923953,
        41.67747570171022,
        46.53960041277653,
        47.276078945107486,
        680.7818074889049,
        -1298.4311116717174,
        -1135.1955063159132,
        -457.6509602535131,
        -306.3996659705885,
        -271.97087582196247,
        -1438.7040745509953,
        110.90914689662443,
        609.9192967921056,
        118.24515801487834,
        -353.4557312955621,
        593.2168051404186,
        1698.4121370851094,
        106.1936704560814,
        -44.242613223985025,
        261.8650129232254,
        28.117198397077786,
        17.417980285984306,
        15.529312809428303,
        -2.721869982995708,
        15.895232988196017,
        -437.50528317377825,
        16.143185089579664,
        -62.098131269305185,
        -85.11554181026241,
        -164.34046498503278,
        -22429.877189359126,
        -167.12099625932686,
        -151.52910910386223,
        -215.8392647922188,
        -422.01095498916357,
        42.15211559537597,
        -1509.3870517470878,
        -152066.08084776232,
        5151.261641567959,
        280.3028840476733,
        217.1644676756258,
        202.74633430814416,
        92.27533018789246,
        -0.6828633260527478,
        426.36963937474866,
    };

    fmm1d<cauchy<>>::evaluate(X_bookmarks, Y_bookmarks, coefs, output, X, Y, U, L, p);

    BOOST_CHECK_EQUAL_COLLECTIONS(std::cbegin(output), std::cend(output),
                                  std::cbegin(expected), std::cend(expected));
}

BOOST_AUTO_TEST_CASE (fmm_works) {
    using namespace nufft;

    vector_t<double> const X = {
        0.008151352509715437,
        0.014187502925144813,
        0.02034366727145609,
        0.02202857637998612,
        0.02894319566184045,
        0.03676834784179506,
        0.04008723274026438,
        0.04804860376246989,
        0.054087472252515534,
        0.060482822060552,
        0.08943680584884994,
        0.10500606717945082,
        0.12032056299608995,
        0.149644690661636,
        0.16399575359168406,
        0.17295293734862338,
        0.1940784067621999,
        0.19472401138108886,
        0.19550665277595458,
        0.21149931766015917,
        0.23238700059801976,
        0.24576762508144334,
        0.24912849700978046,
        0.251474425749884,
        0.2778489711875194,
        0.28278777097888397,
        0.2916855136167613,
        0.29491692123513524,
        0.3024724317021843,
        0.31078385908327544,
        0.3115380920113826,
        0.3136743350571911,
        0.31529335191622043,
        0.3235377148968104,
        0.328478378322246,
        0.3335836873875939,
        0.33426475584419135,
        0.33460561340856576,
        0.3357116589943412,
        0.3639473274730025,
        0.369807915850481,
        0.38095066088070295,
        0.3885254389178232,
        0.41833905661421134,
        0.43304676469343106,
        0.4414304642820588,
        0.4414547284375039,
        0.46146478577120464,
        0.4728643676095725,
        0.4765173566992167,
        0.49193333243936266,
        0.50327617772681,
        0.5071201926838604,
        0.5131249322272673,
        0.5210570991288785,
        0.5232121557759404,
        0.5724516474227774,
        0.5978856123220775,
        0.6100893410408164,
        0.6232861996223433,
        0.62708013819244,
        0.6312108664306908,
        0.6323132468797279,
        0.6336283049655851,
        0.6382476074220222,
        0.6410993790327437,
        0.6455807362292552,
        0.6490014066546634,
        0.6548613345831571,
        0.660760005532016,
        0.6638156375083564,
        0.6670092324816366,
        0.6675466356240218,
        0.6678162509086756,
        0.6711635788951225,
        0.6711908355621132,
        0.6760620468036482,
        0.6836411521096943,
        0.6992705353896258,
        0.7294822042921478,
        0.7298892130880534,
        0.7307805318482037,
        0.7545042014704597,
        0.7629569612464584,
        0.7672845987503998,
        0.8005869521646021,
        0.8091430602590535,
        0.8098393553368344,
        0.8246067244350386,
        0.8538586934328853,
        0.8583806865046115,
        0.877879272796741,
        0.9084083052440752,
        0.9170651067728552,
        0.9392164392688491,
        0.9577965275145455,
        0.991771244608467,
        0.996114194111184,
        0.99728394258303,
        0.9996043195049491,
    };

    vector_t<double> const Y = {
        0.008574352027924226,
        0.015532094909469718,
        0.02503638261672947,
        0.025273977817524607,
        0.030136328847707672,
        0.03193888114010712,
        0.036379011637759806,
        0.049401195219627825,
        0.06495963578273733,
        0.10469484229963011,
        0.10859464450178247,
        0.11096437432741091,
        0.11950824832697693,
        0.12797000914539924,
        0.13361530017234657,
        0.1712125625802925,
        0.1746227225656114,
        0.17811964189330887,
        0.18296390553395825,
        0.1960863528651533,
        0.19663701991455795,
        0.20045646117182492,
        0.20177058785210367,
        0.20631574072930658,
        0.21370735773419325,
        0.22749098980239024,
        0.24315749664058406,
        0.24705943352401616,
        0.2712982837845206,
        0.27578520894375513,
        0.2941805617046056,
        0.3096082039742396,
        0.32022149356564045,
        0.3301790642096849,
        0.3364239226460346,
        0.35174156419175895,
        0.38777186184764134,
        0.39734943697281744,
        0.4080701274721237,
        0.4133086386598519,
        0.42029326313526516,
        0.4234984028134612,
        0.44287023776156986,
        0.4552077454315202,
        0.47250014870909895,
        0.4768129216124657,
        0.4948506293000108,
        0.4965915275158179,
        0.507718421792914,
        0.5079331961190532,
        0.5124135125810059,
        0.5153294225309883,
        0.5160677453193077,
        0.5283370527257629,
        0.548125474263581,
        0.5510822406878615,
        0.5573957704853332,
        0.5578559997707941,
        0.5579235868107217,
        0.5697534519672953,
        0.5742467762016721,
        0.5745335087836922,
        0.5786928079717535,
        0.5843327931723206,
        0.5897563066886127,
        0.5976531061080668,
        0.5987283696065842,
        0.6109007185271589,
        0.6123691420168718,
        0.6257329708120922,
        0.6283402470116948,
        0.666427380959485,
        0.6935071116967604,
        0.7236508535858983,
        0.7320976750749608,
        0.7740541314176648,
        0.7760554810455056,
        0.7765223337695715,
        0.7872747379452709,
        0.7956001206875885,
        0.8015863998315045,
        0.8232422813648692,
        0.8399103974308728,
        0.8456111368350772,
        0.8505901907915003,
        0.8538368230512516,
        0.861699624200835,
        0.8667134182351992,
        0.8711596874979621,
        0.8748270491266537,
        0.8906432227011343,
        0.9077690436494292,
        0.9084018849915767,
        0.917174421108744,
        0.921429615505079,
        0.9247138136312409,
        0.9263782804975091,
        0.9438935850257735,
        0.9756257038942202,
        0.9892665037123389,
    };

    vector_t<double> const U = {
        -0.03449954875282528,
        0.6093486993474703,
        0.06145654095009269,
        -0.7012807815864042,
        0.9323398505862033,
        2.1169999607913574,
        -1.8016945124918535,
        0.343893091222027,
        0.4793244965747953,
        0.4802640742643986,
        0.2616883976431308,
        -2.718357904867573,
        -0.5560783083813898,
        0.03625383508494971,
        -0.16727771284741405,
        -0.5468840859987136,
        -0.10907667566115718,
        0.15817132626634228,
        0.6876323699187311,
        -1.5411387985881628,
        0.038753344602976136,
        -0.18035163410567795,
        2.994525438673987,
        -0.3621467755846239,
        0.9526174202898743,
        -1.2474808648961424,
        -1.4660076003936573,
        0.6497129410296961,
        -0.9704439374464038,
        0.4254345682050918,
        -1.2388738186461743,
        -0.7662575719318823,
        0.7550330845718916,
        1.0624397727218688,
        -0.44528955593442704,
        0.8102223766187259,
        -0.8751297797834459,
        0.9447162410275517,
        0.30392491644688163,
        0.04204290602399582,
        -0.7517124545633813,
        1.4608678561511534,
        -0.28159675752836233,
        0.806098757222139,
        0.8092794603294722,
        -1.3910456929328436,
        -0.06411950972285117,
        0.5985397798675192,
        0.33226952318325226,
        -0.39484031020349314,
        -0.2967702898351172,
        -1.1503394639216502,
        -0.7966998077982188,
        0.40197989899524705,
        -0.9537501317032205,
        0.04583122917489201,
        -2.1306394958377597,
        0.2827806211080903,
        0.6124573126444428,
        0.21396946693181107,
        0.626591105636883,
        0.5997588772215863,
        -1.074771526990735,
        -0.7614531277302596,
        0.45400104467619734,
        -0.35291192469612503,
        1.457792413081006,
        1.0042051651254666,
        0.19776801163575275,
        0.23212643620806017,
        0.089729049928636,
        -0.4411514196169876,
        -0.2178989590870556,
        -0.7449912248311719,
        0.62168078255925,
        -1.4314623050526656,
        0.9672762354077022,
        0.8285921026665456,
        -0.1061489967006018,
        1.0624535789030374,
        -1.1016896617948824,
        0.4377483953679585,
        -0.7496549289619789,
        0.624806762343695,
        0.15554763950436584,
        -0.3418579307287108,
        0.7472129549048031,
        -0.05045433192957993,
        -0.04529299628341949,
        0.49091102522675284,
        -0.4177689383852672,
        1.1428008345998049,
        0.9763889562481631,
        0.542509462235141,
        -0.29892920621997693,
        -1.1354334776850212,
        -1.5920022879345825,
        1.7605382455773864,
        -0.39423268364772973,
        -0.11213536207937418,
    };

    int_t const p {5};
    int_t const L {4};

    vector_t<double> const expected = {
        -204.36644480198223,
        447.5099066880207,
        -473.1780611050121,
        -475.4565247582891,
        584.1800861401039,
        42.038000600855476,
        -4878.564400509591,
        173.43346089380378,
        266.37943065571403,
        8832.874523757395,
        -652.7795486154471,
        -342.09060752202146,
        545.4577676489675,
        -146.06433843583062,
        -92.86962273734409,
        249.26305679761518,
        -385.7259432297595,
        -162.4108253547299,
        -116.4908231005478,
        1267.3037149026961,
        671.795454014187,
        210.28241254200387,
        197.93754128254682,
        286.3918624790162,
        -742.5611295522282,
        -198.02681288170714,
        -410.0398006652703,
        -1519.488314537836,
        106.90370166447046,
        -137.28844464515583,
        -1377.7060852140332,
        63.613450408659546,
        -489.3468729512478,
        -487.0555188162681,
        777.0624948981316,
        36.75360315040259,
        544.9940874607844,
        16.605412916298732,
        -33.20083129574907,
        -118.82632935863431,
        445.2828932674776,
        178.79401619785247,
        -880.8093906888923,
        -86.8298539723113,
        -685.2145942093932,
        -1121.1850822560068,
        123.14003247597613,
        207.97510882997668,
        -1602.621560265083,
        -1240.5156905752165,
        -736.1135325345667,
        152.3967389285675,
        144.8193366467378,
        -166.67735209287017,
        -22.037284912248353,
        -6.182927466888637,
        40.557036493277636,
        45.24313283330432,
        45.953713379218314,
        689.0947110617426,
        -1290.278693993979,
        -1127.0536014162278,
        -449.66474706351784,
        -298.6327115188329,
        -264.42161265768135,
        -1431.480456712911,
        118.08779707983147,
        616.580587147081,
        124.84304254466458,
        -373.99916892142903,
        573.1061894795938,
        1682.9341816834876,
        90.42791116903668,
        -58.34945659291115,
        248.2123588665247,
        34.75925771077131,
        23.457281228630958,
        21.428153865599448,
        -0.08652755953040447,
        15.877736225181797,
        -439.56233891034185,
        46.11858304602005,
        -31.99608628961021,
        -54.751609961759144,
        -133.64928835172867,
        -22398.9197785981,
        -135.32916278656074,
        -119.04972184553525,
        -182.6361736273977,
        -388.12243639603764,
        48.2818632720653,
        -1504.2743056928953,
        -152060.99897139793,
        5155.952928057212,
        284.82695357089204,
        221.56827715965844,
        207.09198439283253,
        96.27683629072656,
        2.6213404057932355,
        429.4448711318911,
    };

    auto const actual = fmm1d<cauchy<>>::fmm(X, Y, U, L, p);

    BOOST_CHECK_EQUAL_COLLECTIONS(std::cbegin(actual), std::cend(actual),
                                  std::cbegin(expected), std::cend(expected));
}

BOOST_AUTO_TEST_CASE (deeper_depths_dont_crash) {
    using namespace nufft;

    std::random_device device;
    std::mt19937 gen(device());
    std::uniform_real_distribution<> unif_dist(0, 1);
    std::normal_distribution<> normal_dist(0, 1);
    std::vector<double> X(100);
    std::vector<double> U(100);
    std::vector<double> Y(100);
    for (int i = 0; i < 100; ++i) {
        X[i] = unif_dist(gen);
        Y[i] = unif_dist(gen);
        U[i] = normal_dist(gen);
    }
    std::sort(std::begin(X), std::end(X));
    std::sort(std::begin(Y), std::end(Y));

    for (int L = 2; L < 15; ++L) {
        fmm1d<cauchy<>>::fmm(X, Y, U, L, 4);
    }
}

// Local Variables:
// indent-tabs-mode: nil
// End:
